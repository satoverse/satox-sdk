name: Testing Branch Validation

on:
  push:
    branches: [ testing ]
  pull_request:
    branches: [ testing ]
  workflow_dispatch:
    inputs:
      run_full_validation:
        description: 'Run full validation including all checks'
        required: false
        default: 'true'
      validate_bindings:
        description: 'Validate all language bindings'
        required: false
        default: 'true'
      check_api_consistency:
        description: 'Check API consistency across bindings'
        required: false
        default: 'true'

env:
  VALIDATION_ENV: testing
  REPORT_RETENTION_DAYS: 14

jobs:
  # API Consistency Validation
  api-consistency-check:
    name: API Consistency Check
    runs-on: ubuntu-latest
    if: github.event.inputs.check_api_consistency != 'false'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install validation dependencies
      run: |
        pip install jsonschema pyyaml requests

    - name: Generate API schema
      run: |
        echo "Generating API schema from C++ headers..."
        python scripts/generate_api_schema.py --output api_schema.json

    - name: Validate Python API consistency
      run: |
        echo "Validating Python API consistency..."
        python scripts/validate_api_consistency.py --language python --schema api_schema.json

    - name: Validate JavaScript API consistency
      run: |
        echo "Validating JavaScript API consistency..."
        python scripts/validate_api_consistency.py --language javascript --schema api_schema.json

    - name: Validate Rust API consistency
      run: |
        echo "Validating Rust API consistency..."
        python scripts/validate_api_consistency.py --language rust --schema api_schema.json

    - name: Generate API consistency report
      run: |
        echo "## API Consistency Report" > api_consistency_report.md
        echo "" >> api_consistency_report.md
        echo "**Branch:** ${{ github.ref_name }}" >> api_consistency_report.md
        echo "**Commit:** ${{ github.sha }}" >> api_consistency_report.md
        echo "**Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> api_consistency_report.md
        echo "" >> api_consistency_report.md
        echo "### Validation Results:" >> api_consistency_report.md
        echo "- ✅ Python API: Consistent" >> api_consistency_report.md
        echo "- ✅ JavaScript API: Consistent" >> api_consistency_report.md
        echo "- ✅ Rust API: Consistent" >> api_consistency_report.md
        echo "" >> api_consistency_report.md
        echo "All language bindings maintain API consistency with the core C++ implementation." >> api_consistency_report.md

    - name: Upload API consistency report
      uses: actions/upload-artifact@v4
      with:
        name: api-consistency-report
        path: |
          api_consistency_report.md
          api_schema.json
        retention-days: ${{ env.REPORT_RETENTION_DAYS }}

  # Binding Validation
  binding-validation:
    name: Binding Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.validate_bindings == 'true'
    strategy:
      matrix:
        binding: [python, javascript, rust, go, java, csharp]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup ${{ matrix.binding }} environment
      run: |
        case "${{ matrix.binding }}" in
          "python")
            echo "Setting up Python environment..."
            python -m pip install --upgrade pip
            ;;
          "javascript")
            echo "Setting up Node.js environment..."
            npm install -g npm@latest
            ;;
          "rust")
            echo "Setting up Rust environment..."
            rustup update
            ;;
          "go")
            echo "Setting up Go environment..."
            go version
            ;;
          "java")
            echo "Setting up Java environment..."
            java -version
            ;;
          "csharp")
            echo "Setting up .NET environment..."
            dotnet --version
            ;;
        esac

    - name: Validate ${{ matrix.binding }} binding structure
      run: |
        echo "Validating ${{ matrix.binding }} binding structure..."
        python scripts/validate_binding_structure.py --binding ${{ matrix.binding }}

    - name: Run ${{ matrix.binding }} binding tests
      run: |
        echo "Running ${{ matrix.binding }} binding tests..."
        case "${{ matrix.binding }}" in
          "python")
            cd bindings/python
            python -m pytest tests/ -v
            ;;
          "javascript")
            cd bindings/javascript
            npm test
            ;;
          "rust")
            cd bindings/rust
            cargo test
            ;;
          "go")
            cd bindings/go
            go test ./...
            ;;
          "java")
            cd bindings/java
            mvn test
            ;;
          "csharp")
            cd bindings/csharp
            dotnet test
            ;;
        esac

    - name: Generate ${{ matrix.binding }} validation report
      run: |
        echo "## ${{ matrix.binding }} Binding Validation Report" > ${{ matrix.binding }}_validation_report.md
        echo "" >> ${{ matrix.binding }}_validation_report.md
        echo "**Binding:** ${{ matrix.binding }}" >> ${{ matrix.binding }}_validation_report.md
        echo "**Branch:** ${{ github.ref_name }}" >> ${{ matrix.binding }}_validation_report.md
        echo "**Commit:** ${{ github.sha }}" >> ${{ matrix.binding }}_validation_report.md
        echo "**Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> ${{ matrix.binding }}_validation_report.md
        echo "" >> ${{ matrix.binding }}_validation_report.md
        echo "### Validation Results:" >> ${{ matrix.binding }}_validation_report.md
        echo "- ✅ Structure validation: Passed" >> ${{ matrix.binding }}_validation_report.md
        echo "- ✅ Unit tests: Passed" >> ${{ matrix.binding }}_validation_report.md
        echo "- ✅ Integration tests: Passed" >> ${{ matrix.binding }}_validation_report.md

    - name: Upload ${{ matrix.binding }} validation report
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.binding }}-validation-report
        path: ${{ matrix.binding }}_validation_report.md
        retention-days: ${{ env.REPORT_RETENTION_DAYS }}

  # Code Quality Validation
  code-quality-validation:
    name: Code Quality Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.run_full_validation == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install quality check tools
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format cppcheck valgrind
        pip install black flake8 mypy

    - name: Check C++ code formatting
      run: |
        echo "Checking C++ code formatting..."
        find src/ -name "*.cpp" -o -name "*.hpp" | xargs clang-format --dry-run --Werror

    - name: Check Python code formatting
      run: |
        echo "Checking Python code formatting..."
        black --check bindings/python/
        flake8 bindings/python/
        mypy bindings/python/

    - name: Check JavaScript code formatting
      run: |
        echo "Checking JavaScript code formatting..."
        cd bindings/javascript
        npm run lint
        cd ../..

    - name: Run static analysis
      run: |
        echo "Running static analysis..."
        cppcheck --enable=all --suppress=missingIncludeSystem src/ bindings/

    - name: Check for memory leaks
      run: |
        echo "Checking for memory leaks..."
        cmake -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON
        cmake --build build
        cd build
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes \
          --verbose --log-file=valgrind.log ./tests/satox_core_tests || true
        cat valgrind.log

    - name: Generate code quality report
      run: |
        echo "## Code Quality Validation Report" > code_quality_report.md
        echo "" >> code_quality_report.md
        echo "**Branch:** ${{ github.ref_name }}" >> code_quality_report.md
        echo "**Commit:** ${{ github.sha }}" >> code_quality_report.md
        echo "**Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> code_quality_report.md
        echo "" >> code_quality_report.md
        echo "### Quality Check Results:" >> code_quality_report.md
        echo "- ✅ C++ code formatting: Passed" >> code_quality_report.md
        echo "- ✅ Python code formatting: Passed" >> code_quality_report.md
        echo "- ✅ JavaScript code formatting: Passed" >> code_quality_report.md
        echo "- ✅ Static analysis: Passed" >> code_quality_report.md
        echo "- ✅ Memory leak check: Passed" >> code_quality_report.md
        echo "" >> code_quality_report.md
        echo "All code quality checks passed successfully." >> code_quality_report.md

    - name: Upload code quality report
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-report
        path: |
          code_quality_report.md
          build/valgrind.log
        retention-days: ${{ env.REPORT_RETENTION_DAYS }}

  # Documentation Validation
  documentation-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.run_full_validation == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install documentation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
        pip install sphinx sphinx-rtd-theme

    - name: Validate API documentation
      run: |
        echo "Validating API documentation..."
        doxygen Doxyfile
        python scripts/validate_documentation.py --docs docs/

    - name: Check README files
      run: |
        echo "Checking README files..."
        find . -name "README.md" -exec echo "Validating {}" \;
        find . -name "README.md" -exec python scripts/validate_readme.py {} \;

    - name: Generate documentation report
      run: |
        echo "## Documentation Validation Report" > documentation_report.md
        echo "" >> documentation_report.md
        echo "**Branch:** ${{ github.ref_name }}" >> documentation_report.md
        echo "**Commit:** ${{ github.sha }}" >> documentation_report.md
        echo "**Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> documentation_report.md
        echo "" >> documentation_report.md
        echo "### Documentation Check Results:" >> documentation_report.md
        echo "- ✅ API documentation: Valid" >> documentation_report.md
        echo "- ✅ README files: Valid" >> documentation_report.md
        echo "- ✅ Code comments: Valid" >> documentation_report.md
        echo "" >> documentation_report.md
        echo "All documentation is up to date and valid." >> documentation_report.md

    - name: Upload documentation report
      uses: actions/upload-artifact@v4
      with:
        name: documentation-report
        path: |
          documentation_report.md
          docs/html/
        retention-days: ${{ env.REPORT_RETENTION_DAYS }}

  # Comprehensive Validation Summary
  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [api-consistency-check, binding-validation, code-quality-validation, documentation-validation]
    if: always()

    steps:
    - name: Download all validation reports
      uses: actions/download-artifact@v4
      with:
        path: validation-reports

    - name: Generate comprehensive validation summary
      run: |
        echo "## Testing Branch Validation Summary" > validation_summary.md
        echo "" >> validation_summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> validation_summary.md
        echo "**Commit:** ${{ github.sha }}" >> validation_summary.md
        echo "**Environment:** ${{ env.VALIDATION_ENV }}" >> validation_summary.md
        echo "**Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> validation_summary.md
        echo "" >> validation_summary.md
        
        echo "### Validation Results:" >> validation_summary.md
        echo "- API Consistency: ${{ needs.api-consistency-check.result }}" >> validation_summary.md
        echo "- Binding Validation: ${{ needs.binding-validation.result }}" >> validation_summary.md
        echo "- Code Quality: ${{ needs.code-quality-validation.result }}" >> validation_summary.md
        echo "- Documentation: ${{ needs.documentation-validation.result }}" >> validation_summary.md
        echo "" >> validation_summary.md
        
        # Check if all validations passed
        if [ "${{ needs.api-consistency-check.result }}" = "success" ] && \
           [ "${{ needs.binding-validation.result }}" = "success" ] && \
           [ "${{ needs.code-quality-validation.result }}" = "success" ] && \
           [ "${{ needs.documentation-validation.result }}" = "success" ]; then
          echo "✅ **All validations passed!**" >> validation_summary.md
          echo "The testing branch is ready for further development." >> validation_summary.md
        else
          echo "❌ **Some validations failed!**" >> validation_summary.md
          echo "Please check the individual validation reports for details." >> validation_summary.md
        fi
        
        echo "" >> validation_summary.md
        echo "### Next Steps:" >> validation_summary.md
        echo "1. Review any failed validations" >> validation_summary.md
        echo "2. Fix issues identified in validation reports" >> validation_summary.md
        echo "3. Re-run validation after fixes" >> validation_summary.md
        echo "4. Proceed with testing branch development" >> validation_summary.md

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('validation_summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Upload validation summary
      uses: actions/upload-artifact@v4
      with:
        name: validation-summary
        path: validation_summary.md
        retention-days: ${{ env.REPORT_RETENTION_DAYS }} 