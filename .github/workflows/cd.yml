name: Continuous Deployment

on:
  push:
    tags:
      - 'v*'
  workflow_run:
    workflows: ["Comprehensive CI - All Language Bindings"]
    types:
      - completed
    branches: [main]

jobs:
  # Build and Package All Language Bindings
  build-packages:
    name: Build Packages
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Check required secrets
      run: |
        missing=0
        if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
          echo "::error::Missing required secret: DOCKER_USERNAME"
          missing=1
        fi
        if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
          echo "::error::Missing required secret: DOCKER_PASSWORD"
          missing=1
        fi
        if [ -z "${{ secrets.PYPI_USERNAME }}" ]; then
          echo "::error::Missing required secret: PYPI_USERNAME"
          missing=1
        fi
        if [ -z "${{ secrets.PYPI_PASSWORD }}" ]; then
          echo "::error::Missing required secret: PYPI_PASSWORD"
          missing=1
        fi
        if [ -z "${{ secrets.CRATES_TOKEN }}" ]; then
          echo "::error::Missing required secret: CRATES_TOKEN"
          missing=1
        fi
        if [ -z "${{ secrets.NUGET_API_KEY }}" ]; then
          echo "::error::Missing required secret: NUGET_API_KEY"
          missing=1
        fi
        if [ $missing -eq 1 ]; then
          exit 1
        fi

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install system dependencies
      run: |
        if [ "$RUNNER_OS" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libssl-dev libcurl4-openssl-dev
          sudo apt-get install -y lua5.4 liblua5.4-dev luarocks
        elif [ "$RUNNER_OS" = "macOS" ]; then
          brew install cmake openssl curl lua
        fi

    - name: Build C++ Core
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_ALL_BINDINGS=ON
        cmake --build build -- -j $(nproc)

    - name: Build Python Package
      run: |
        cd bindings/python
        python setup.py sdist bdist_wheel
        cd ../..

    - name: Build Rust Package
      run: |
        cd bindings/rust
        cargo build --release
        cargo package
        cd ../..

    - name: Build Go Package
      run: |
        cd bindings/go
        go build -o satox-sdk-go ./...
        cd ../..

    - name: Build Java Package
      run: |
        cd bindings/java
        mvn clean package
        cd ../..

    - name: Build C# Package
      run: |
        cd bindings/csharp
        dotnet pack -c Release
        cd ../..

    - name: Build TypeScript Package
      run: |
        cd bindings/typescript
        npm run build
        npm pack
        cd ../..

    - name: Build Lua Package
      run: |
        cd bindings/lua
        luarocks make satox-sdk-*.rockspec
        cd ../..

    - name: Build WASM Package
      run: |
        cd bindings/wasm
        npm run build
        npm pack
        cd ../..

    - name: Upload Packages
      uses: actions/upload-artifact@v4
      with:
        name: packages-${{ matrix.platform }}
        path: |
          bindings/python/dist/
          bindings/rust/target/package/
          bindings/go/satox-sdk-go
          bindings/java/target/
          bindings/csharp/bin/Release/
          bindings/typescript/satox-sdk-*.tgz
          bindings/lua/
          bindings/wasm/satox-sdk-*.tgz

  # Create GitHub Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-packages
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Check required secrets
      run: |
        missing=0
        if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
          echo "::error::Missing required secret: GITHUB_TOKEN"
          missing=1
        fi
        if [ $missing -eq 1 ]; then
          exit 1
        fi

    - name: Download all packages
      uses: actions/download-artifact@v4
      with:
        path: packages

    - name: Generate release notes
      run: |
        echo "## Satox SDK Release ${{ github.ref_name }}" > release_notes.md
        echo "" >> release_notes.md
        echo "### Thread Safety Status" >> release_notes.md
        echo "✅ All language bindings are fully thread-safe:" >> release_notes.md
        echo "- C++: std::mutex, std::atomic, RAII" >> release_notes.md
        echo "- Python: threading.RLock, threading.Lock, Event" >> release_notes.md
        echo "- Rust: Arc<Mutex>, Arc<RwLock>, Atomic" >> release_notes.md
        echo "- Go: sync.RWMutex, sync.Mutex, Goroutines" >> release_notes.md
        echo "- Java: ReentrantLock, synchronized, volatile" >> release_notes.md
        echo "- C#: ReaderWriterLockSlim, lock, volatile" >> release_notes.md
        echo "- TypeScript: Promise-based locks, async/await" >> release_notes.md
        echo "- Lua: LuaJIT locks, thread-safe state" >> release_notes.md
        echo "- WASM: Web Workers, SharedArrayBuffer, Atomic" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Supported Platforms" >> release_notes.md
        echo "- Linux (Ubuntu 20.04+)" >> release_notes.md
        echo "- Windows (10/11)" >> release_notes.md
        echo "- macOS (10.15+)" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Installation" >> release_notes.md
        echo "See documentation for language-specific installation instructions." >> release_notes.md

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Satox SDK ${{ github.ref_name }}
        body_path: release_notes.md
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        # Upload Python packages
        for file in packages/*/bindings/python/dist/*; do
          if [ -f "$file" ]; then
            gh release upload ${{ github.ref }} "$file"
          fi
        done
        
        # Upload Rust packages
        for file in packages/*/bindings/rust/target/package/*; do
          if [ -f "$file" ]; then
            gh release upload ${{ github.ref }} "$file"
          fi
        done
        
        # Upload Go binaries
        for file in packages/*/bindings/go/satox-sdk-go; do
          if [ -f "$file" ]; then
            gh release upload ${{ github.ref }} "$file"
          fi
        done
        
        # Upload Java packages
        for file in packages/*/bindings/java/target/*.jar; do
          if [ -f "$file" ]; then
            gh release upload ${{ github.ref }} "$file"
          fi
        done
        
        # Upload C# packages
        for file in packages/*/bindings/csharp/bin/Release/*.nupkg; do
          if [ -f "$file" ]; then
            gh release upload ${{ github.ref }} "$file"
          fi
        done
        
        # Upload TypeScript packages
        for file in packages/*/bindings/typescript/satox-sdk-*.tgz; do
          if [ -f "$file" ]; then
            gh release upload ${{ github.ref }} "$file"
          fi
        done
        
        # Upload WASM packages
        for file in packages/*/bindings/wasm/satox-sdk-*.tgz; do
          if [ -f "$file" ]; then
            gh release upload ${{ github.ref }} "$file"
          fi
        done

  # Publish to Package Registries
  publish-packages:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Check required secrets
      run: |
        missing=0
        if [ -z "${{ secrets.PYPI_USERNAME }}" ]; then
          echo "::error::Missing required secret: PYPI_USERNAME"
          missing=1
        fi
        if [ -z "${{ secrets.PYPI_PASSWORD }}" ]; then
          echo "::error::Missing required secret: PYPI_PASSWORD"
          missing=1
        fi
        if [ -z "${{ secrets.CRATES_TOKEN }}" ]; then
          echo "::error::Missing required secret: CRATES_TOKEN"
          missing=1
        fi
        if [ -z "${{ secrets.NUGET_API_KEY }}" ]; then
          echo "::error::Missing required secret: NUGET_API_KEY"
          missing=1
        fi
        if [ $missing -eq 1 ]; then
          exit 1
        fi

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        path: packages

    - name: Publish to PyPI
      run: |
        cd packages/*/bindings/python/dist
        pip install twine
        twine upload --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} *

    - name: Publish to crates.io
      run: |
        cd packages/*/bindings/rust
        cargo publish --token ${{ secrets.CRATES_TOKEN }}

    - name: Publish to npm
      run: |
        cd packages/*/bindings/typescript
        npm publish --access public

    - name: Publish to Maven Central
      run: |
        cd packages/*/bindings/java
        mvn deploy -Dmaven.test.skip=true

    - name: Publish to NuGet
      run: |
        cd packages/*/bindings/csharp
        dotnet nuget push *.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

  # Deploy Documentation
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Check required secrets
      run: |
        missing=0
        if [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
          echo "::error::Missing required secret: GITHUB_TOKEN"
          missing=1
        fi
        if [ $missing -eq 1 ]; then
          exit 1
        fi

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme myst-parser

    - name: Build documentation
      run: |
        cd docs
        make html
        cd ..

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  # Docker Image Build and Push
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Check required secrets
      run: |
        missing=0
        if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
          echo "::error::Missing required secret: DOCKER_USERNAME"
          missing=1
        fi
        if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
          echo "::error::Missing required secret: DOCKER_PASSWORD"
          missing=1
        fi
        if [ $missing -eq 1 ]; then
          exit 1
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Python image
      uses: docker/build-push-action@v5
      with:
        context: ./docker/python
        push: true
        tags: |
          satoverse/satox-sdk-python:${{ github.ref_name }}
          satoverse/satox-sdk-python:latest

    - name: Build and push Rust image
      uses: docker/build-push-action@v5
      with:
        context: ./docker/rust
        push: true
        tags: |
          satoverse/satox-sdk-rust:${{ github.ref_name }}
          satoverse/satox-sdk-rust:latest

    - name: Build and push Go image
      uses: docker/build-push-action@v5
      with:
        context: ./docker/go
        push: true
        tags: |
          satoverse/satox-sdk-go:${{ github.ref_name }}
          satoverse/satox-sdk-go:latest

  # Notify Deployment Success
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [publish-packages, deploy-docs, docker-build]
    if: success() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Notify deployment success
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const release_url = `https://github.com/${owner}/${repo}/releases/tag/${{ github.ref_name }}`;
          
          const message = `🚀 **Satox SDK ${{ github.ref_name }}** has been successfully deployed!\n\n` +
                         `📦 **Packages published to:**\n` +
                         `- PyPI: \`pip install satox-sdk\`\n` +
                         `- crates.io: \`cargo add satox-sdk\`\n` +
                         `- npm: \`npm install satox-sdk\`\n` +
                         `- Maven Central: \`<dependency>satox-sdk</dependency>\`\n` +
                         `- NuGet: \`Install-Package SatoxSdk\`\n\n` +
                         `🐳 **Docker images:**\n` +
                         `- \`docker pull satoverse/satox-sdk-python:${{ github.ref_name }}\`\n` +
                         `- \`docker pull satoverse/satox-sdk-rust:${{ github.ref_name }}\`\n` +
                         `- \`docker pull satoverse/satox-sdk-go:${{ github.ref_name }}\`\n\n` +
                         `📚 **Documentation:** https://${owner}.github.io/${repo}/\n\n` +
                         `✅ **All language bindings are fully thread-safe!**\n\n` +
                         `🔗 **Release:** ${release_url}`;
          
          github.rest.issues.createComment({
            owner,
            repo,
            issue_number: context.issue.number,
            body: message
          }); 