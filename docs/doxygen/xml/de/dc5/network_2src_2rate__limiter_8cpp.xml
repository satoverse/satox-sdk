<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="de/dc5/network_2src_2rate__limiter_8cpp" kind="file" language="C++">
    <compoundname>rate_limiter.cpp</compoundname>
    <includes refid="d2/d0e/network_2src_2rate__limiter_8hpp" local="yes">rate_limiter.hpp</includes>
    <includes local="no">spdlog/spdlog.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/network/src/rate_limiter.cpp</label>
        <link refid="de/dc5/network_2src_2rate__limiter_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>rate_limiter.hpp</label>
        <link refid="d2/d0e/network_2src_2rate__limiter_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>chrono</label>
      </node>
      <node id="7">
        <label>memory</label>
      </node>
      <node id="4">
        <label>mutex</label>
      </node>
      <node id="8">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="5">
        <label>unordered_map</label>
      </node>
    </incdepgraph>
    <innernamespace refid="df/daa/namespacesatox">satox</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/d0e/network_2src_2rate__limiter_8hpp" kindref="compound">rate_limiter.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/spdlog.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="df/daa/namespacesatox" kindref="compound">satox</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="dd/d4b/classsatox_1_1RateLimiter_1aa896bc3eae7ebdbe33b6a8ec5fd54250" refkind="member"><highlight class="normal">RateLimiter&amp;<sp/><ref refid="dd/d4b/classsatox_1_1RateLimiter_1aa896bc3eae7ebdbe33b6a8ec5fd54250" kindref="member">RateLimiter::getInstance</ref>()<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>RateLimiter<sp/>instance;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">RateLimiter::RateLimiter()<sp/>:<sp/>running_(false)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>default<sp/>limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>default_limit_<sp/>=<sp/>{100,<sp/>std::chrono::seconds(60)};<sp/></highlight><highlight class="comment">//<sp/>100<sp/>requests<sp/>per<sp/>minute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>method-specific<sp/>limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getblockchaininfo&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{10,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getmempoolinfo&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{10,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getmininginfo&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{10,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getnetworkinfo&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{10,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getpeerinfo&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{10,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getrawtransaction&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;sendrawtransaction&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{5,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getblock&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getblockhash&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getblockcount&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getdifficulty&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getbalance&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;listunspent&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getnewaddress&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{10,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;gettransaction&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;listtransactions&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;backupwallet&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{1,<sp/>std::chrono::seconds(3600)};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;importwallet&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{1,<sp/>std::chrono::seconds(3600)};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;dumpprivkey&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{1,<sp/>std::chrono::seconds(3600)};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;importprivkey&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{1,<sp/>std::chrono::seconds(3600)};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getwalletinfo&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getaddressesbyaccount&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getaccount&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getaccountaddress&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getaddressesbylabel&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getreceivedbylabel&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;listlabels&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getaddressinfo&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getblocktemplate&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{10,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;submitblock&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{5,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getmempoolentry&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;gettxout&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;gettxoutsetinfo&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{5,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;verifychain&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{1,<sp/>std::chrono::seconds(3600)};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getchaintips&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{10,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getchaintxstats&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{10,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getnettotals&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{10,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getnetworkhashps&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{10,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getmemoryinfo&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{10,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getrpcinfo&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{10,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;help&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;stop&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{1,<sp/>std::chrono::seconds(3600)};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;uptime&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>Satoxcoin-specific<sp/>method<sp/>limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;issueasset&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{5,<sp/>std::chrono::seconds(3600)};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;reissueasset&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{5,<sp/>std::chrono::seconds(3600)};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;transferasset&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;listassets&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getassetinfo&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getassetallocation&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getassethistory&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getassetbalances&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getassettransactions&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getassetaddresses&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getassetaddressbalances&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getassetaddresstransactions&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getassetaddresshistory&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getassetaddressallocations&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getassetaddressallocationhistory&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getassetaddressallocationbalances&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getassetaddressallocationtransactions&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getipfshash&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getipfsdata&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getipfshistory&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getipfsbalances&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getipfstransactions&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getipfsaddresses&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getipfsaddressbalances&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getipfsaddresstransactions&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getipfsaddresshistory&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getnftinfo&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getnfthistory&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getnftbalances&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getnfttransactions&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getnftaddresses&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getnftaddressbalances&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getnftaddresstransactions&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[</highlight><highlight class="stringliteral">&quot;getnftaddresshistory&quot;</highlight><highlight class="normal">]<sp/>=<sp/>{20,<sp/>std::chrono::seconds(60)};</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">RateLimiter::~RateLimiter()<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d4b/classsatox_1_1RateLimiter_1a060b908cfd43b703463bed25d4dbfa5b" kindref="member">shutdown</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="dd/d4b/classsatox_1_1RateLimiter_1a1acb06fb6accc0b532219b953410ed54" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dd/d4b/classsatox_1_1RateLimiter_1a1acb06fb6accc0b532219b953410ed54" kindref="member">RateLimiter::initialize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(running_)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::error(</highlight><highlight class="stringliteral">&quot;RateLimiter<sp/>already<sp/>running&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>running_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;RateLimiter<sp/>initialized<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="dd/d4b/classsatox_1_1RateLimiter_1a060b908cfd43b703463bed25d4dbfa5b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d4b/classsatox_1_1RateLimiter_1a060b908cfd43b703463bed25d4dbfa5b" kindref="member">RateLimiter::shutdown</ref>()<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!running_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>running_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dd/d4b/classsatox_1_1RateLimiter_1ae93050ad0b32d9a91c4c7254405c245e" kindref="member">resetAllLimits</ref>();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;RateLimiter<sp/>shut<sp/>down<sp/>successfully&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="dd/d4b/classsatox_1_1RateLimiter_1ab31b60ae09aa7f34173832f9d992135f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dd/d4b/classsatox_1_1RateLimiter_1ab31b60ae09aa7f34173832f9d992135f" kindref="member">RateLimiter::isRunning</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>running_;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="dd/d4b/classsatox_1_1RateLimiter_1aea446ed6643ce6c2f8007edd611d6e5c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dd/d4b/classsatox_1_1RateLimiter_1aea446ed6643ce6c2f8007edd611d6e5c" kindref="member">RateLimiter::checkLimit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>method,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>client_id)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!running_)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;RateLimiter<sp/>not<sp/>running&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>now<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>client_counts<sp/>=<sp/>request_counts_[client_id];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>count<sp/>=<sp/>client_counts[method];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>appropriate<sp/>limit<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LimitConfig*<sp/>limit<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>method_limits_.find(method);<sp/>it<sp/>!=<sp/>method_limits_.end())<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>&amp;it-&gt;second;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>client_limits_.find(client_id);<sp/>it<sp/>!=<sp/>client_limits_.end())<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>&amp;it-&gt;second;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>&amp;default_limit_;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>window<sp/>has<sp/>expired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(now<sp/>-<sp/>count.window_start<sp/>&gt;<sp/>limit-&gt;window)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count.count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count.window_start<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>limit<sp/>has<sp/>been<sp/>exceeded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count.count<sp/>&lt;<sp/>limit-&gt;max_requests;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="dd/d4b/classsatox_1_1RateLimiter_1a40e8ae4a6be30e87bff28a2f9276d573" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d4b/classsatox_1_1RateLimiter_1a40e8ae4a6be30e87bff28a2f9276d573" kindref="member">RateLimiter::updateLimit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>method,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>client_id)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!running_)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;RateLimiter<sp/>not<sp/>running&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>now<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>client_counts<sp/>=<sp/>request_counts_[client_id];</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>count<sp/>=<sp/>client_counts[method];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>appropriate<sp/>limit<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LimitConfig*<sp/>limit<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>method_limits_.find(method);<sp/>it<sp/>!=<sp/>method_limits_.end())<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>&amp;it-&gt;second;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>client_limits_.find(client_id);<sp/>it<sp/>!=<sp/>client_limits_.end())<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>&amp;it-&gt;second;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>&amp;default_limit_;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>window<sp/>has<sp/>expired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(now<sp/>-<sp/>count.window_start<sp/>&gt;<sp/>limit-&gt;window)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count.count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count.window_start<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>the<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>count.count++;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="dd/d4b/classsatox_1_1RateLimiter_1a47352e51b5c86e510c9de06668ccc2b3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d4b/classsatox_1_1RateLimiter_1a47352e51b5c86e510c9de06668ccc2b3" kindref="member">RateLimiter::resetLimit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>method,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>client_id)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!running_)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;RateLimiter<sp/>not<sp/>running&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>client_counts<sp/>=<sp/>request_counts_[client_id];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>client_counts.erase(method);</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="dd/d4b/classsatox_1_1RateLimiter_1ae93050ad0b32d9a91c4c7254405c245e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d4b/classsatox_1_1RateLimiter_1ae93050ad0b32d9a91c4c7254405c245e" kindref="member">RateLimiter::resetAllLimits</ref>()<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!running_)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;RateLimiter<sp/>not<sp/>running&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>request_counts_.clear();</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="dd/d4b/classsatox_1_1RateLimiter_1a22e1caf087967632350a4dca3ff4e22d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d4b/classsatox_1_1RateLimiter_1a22e1caf087967632350a4dca3ff4e22d" kindref="member">RateLimiter::setMethodLimit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>method,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_requests,<sp/>std::chrono::seconds<sp/>window)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!running_)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;RateLimiter<sp/>not<sp/>running&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>method_limits_[method]<sp/>=<sp/>{max_requests,<sp/>window};</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="dd/d4b/classsatox_1_1RateLimiter_1ab7ce71e9b54fb2c3ed2fc0f773acda8f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d4b/classsatox_1_1RateLimiter_1ab7ce71e9b54fb2c3ed2fc0f773acda8f" kindref="member">RateLimiter::setDefaultLimit</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_requests,<sp/>std::chrono::seconds<sp/>window)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!running_)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;RateLimiter<sp/>not<sp/>running&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>default_limit_<sp/>=<sp/>{max_requests,<sp/>window};</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="dd/d4b/classsatox_1_1RateLimiter_1ac158b4d4a4c5da93c54d3970d20b4c35" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/d4b/classsatox_1_1RateLimiter_1ac158b4d4a4c5da93c54d3970d20b4c35" kindref="member">RateLimiter::setClientLimit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>client_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_requests,<sp/>std::chrono::seconds<sp/>window)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lock(mutex_);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!running_)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;RateLimiter<sp/>not<sp/>running&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>client_limits_[client_id]<sp/>=<sp/>{max_requests,<sp/>window};</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>satox<sp/></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/network/src/rate_limiter.cpp"/>
  </compounddef>
</doxygen>
