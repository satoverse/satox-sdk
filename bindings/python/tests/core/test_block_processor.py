"""Tests for the block processor module."""\n\nimport pytest\nimport json\nfrom satox_bindings.core import BlockProcessor\n\n@pytest.fixture\ndef block_processor():\n    """Create a block processor instance for testing."""\n    processor = BlockProcessor()\n    processor.initialize()\n    yield processor\n    processor.shutdown()\n\n@pytest.fixture\ndef sample_block():\n    """Create a sample block for testing."""\n    return {\n        "hash": "0x123",\n        "previous_hash": "0x456",\n        "timestamp": 1234567890,\n        "transactions": [\n            {\n                "hash": "0x789",\n                "sender": "0xabc",\n                "receiver": "0xdef",\n                "amount": 100\n            }\n        ]\n    }\n\ndef test_initialize(block_processor):\n    """Test block processor initialization."""\n    assert block_processor.initialize() is True\n    assert block_processor.get_last_error() == ""\n\ndef test_shutdown(block_processor):\n    """Test block processor shutdown."""\n    assert block_processor.shutdown() is True\n    assert block_processor.get_current_block() is None\n\ndef test_process_block(block_processor, sample_block):\n    """Test block processing."""\n    block_data = json.dumps(sample_block).encode()\n    assert block_processor.process_block(block_data) is True\n    assert block_processor.get_current_block() == sample_block\n\ndef test_get_block(block_processor, sample_block):\n    """Test getting a block by hash."""\n    block_data = json.dumps(sample_block).encode()\n    block_processor.process_block(block_data)\n    assert block_processor.get_block(sample_block["hash"]) == sample_block\n\ndef test_invalid_block(block_processor):\n    """Test processing an invalid block."""\n    invalid_block = {"hash": "0x123"}  # Missing required fields\n    block_data = json.dumps(invalid_block).encode()\n    assert block_processor.process_block(block_data) is False\n    assert "Missing required field" in block_processor.get_last_error()\n\ndef test_invalid_transaction(block_processor):\n    """Test processing a block with invalid transaction."""\n    block = {\n        "hash": "0x123",\n        "previous_hash": "0x456",\n        "timestamp": 1234567890,\n        "transactions": [\n            {"hash": "0x789"}  # Missing required fields\n        ]\n    }\n    block_data = json.dumps(block).encode()\n    assert block_processor.process_block(block_data) is False\n    assert "Missing required field" in block_processor.get_last_error()\n\ndef test_error_handling(block_processor):\n    """Test error handling."""\n    block_processor.shutdown()\n    assert block_processor.process_block(b"{}") is False\n    assert "not initialized" in block_processor.get_last_error()\n\ndef test_clear_error(block_processor):\n    """Test clearing error message."""\n    block_processor.shutdown()\n    block_processor.process_block(b"{}")\n    assert block_processor.get_last_error() != ""\n    block_processor.clear_last_error()\n    assert block_processor.get_last_error() == ""
